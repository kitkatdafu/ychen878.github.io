<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Haskell on Yi Chen</title><link>https://www.mrr1vfe.io/tags/haskell/</link><description>Recent content in Haskell on Yi Chen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Yi Chen</copyright><lastBuildDate>Sun, 14 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.mrr1vfe.io/tags/haskell/index.xml" rel="self" type="application/rss+xml"/><item><title>Containers And Typeclasses</title><link>https://www.mrr1vfe.io/posts/chapter_4_containers_and_typeclasses/</link><pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.mrr1vfe.io/posts/chapter_4_containers_and_typeclasses/</guid><description>Notes on Practical Haskell: A. Serra no Mean, Practical Haskell, https://doi.org/10.1007/978-1-4842-4480-7_4
Using Packages Dependency Dependencies are noted under build-depends in the .cabal file
Packages are available on Hackage and Stackage, depending on the project manager
Packages&amp;#39; version can be specified and constrained
1 containers &amp;gt;= 0.6.0.1 &amp;amp;&amp;amp; &amp;lt;= 0.7 Building stack&amp;#39;s resolvers</description></item><item><title>High Order Haskell</title><link>https://www.mrr1vfe.io/posts/chapter_3_high_order_haskell/</link><pubDate>Sun, 07 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.mrr1vfe.io/posts/chapter_3_high_order_haskell/</guid><description>Notes on Practical Haskell: A. Serra no Mean, Practical Haskell, https://doi.org/10.1007/978-1-4842-4480-7_3
Parametric Polymorphism Types are parametrized by type parameters
first letter of a type parameter is in lower case
These type parameters can represent any type
Replaced when applying the function with values that have concrete types
Can have more than one type parameters
Can have more than one same type parameter</description></item><item><title>First-Order Haskell</title><link>https://www.mrr1vfe.io/posts/chapter_2_first_order_haskell/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://www.mrr1vfe.io/posts/chapter_2_first_order_haskell/</guid><description>Notes on Practical Haskell: A. Serrano Mena, Practical Haskell, https://doi.org/10.1007/978-1-4842-4480-7_2
Basic Data Types Chars A Char value contains a unicode character. Functions for manipulating Char can be imported from Data.Char.
Numbers Int bounded integral type
Integer unbounded integral type
Ratio exact rational values, created using n % m
Float single precision floating-point</description></item></channel></rss>