#+TITLE: First-Order Haskell
#+DATE: <2021-11-01 Mon>
#+category: notes
#+tags[]: Haskell
#+keywords[]: Haskell PL
Notes on /Practical Haskell/: A. Serrano Mena, Practical Haskell, https://doi.org/10.1007/978-1-4842-4480-7_2
* Basic Data Types
** Chars
A =Char= value contains a unicode character. Functions for manipulating =Char= can be imported from =Data.Char=.
** Numbers
- =Int= :: bounded integral type
- =Integer= :: unbounded integral type
- =Ratio= :: exact rational values, created using =n % m=
- =Float= :: single precision floating-point
- =Double= :: double precision floating-point
*** Number Conversions
The following functions enables conversions from one numerical type to the other
- =fromInteger=
- =toInteger=
- =fromRational=
- =toRational=
** Strings
=String= in Haskell essentially is a list of =Char=, namely =[Char]=.
** Lists
Lists are sequences of values that have the same type. They are implemented as linked lists.
*** List Construction
- =[]= :: nil, an empty list
- =(:)= :: cons, prepend an element to the front of a list
*** List Access
- =null= :: can be used to check if a list is empty
- =head= :: returns the first element of a list
- =tail= :: returns the list without the first element
** Booleans
A =Bool= only has two values: =True= and =False=. Boolean operations are similar to those used in =C=: =&&= for and, =||= for or, and =not= for not. Operations are executed in a short-circuiting manner. The following comparison operators return =Bool=:
- ====
- =\==
- =>==
- =>=
- =<==
- =<=
*** if a then b else c
The predicate =a= after =if= must be of =Bool=. Clauses =b= and =c= must have the same type.
** Functions
- function name starts with a lowercase letter
- parameters also start with a lowercase letter
** Bindings
There are two types of bindings.
- =let= binding
- =where= binding
The differences between the two are:
- =let= binding is located before usage
  - need a =in= after binding
- =where= binding is located after usage
Bindings bind an expression to a name:
#+BEGIN_SRC haskell
name = expression
#+END_SRC
** Indentation
all elements in the same block need to have the same level of indentation
* Algebraic data type
- Declare a data type with the =data= keyword
- Associate with a set of constructors
    - Different constructors are separated by =|=
- Each constructor can include a set of arguments of different types
    - They save extra information
- Data type and constructor name has to start with an upper case letter
- Data type and constructor have different name space
    - Constructors among different data type share the same name space
- Adding =deriving show= at the end of a data type allows Haskell automatically derives =Show= typeclass.
    - Data type that is deemed to used in the constructor of other data type should derive =Show=
* Pattern Matching
- Can match constructors
- Can match constants
- Can use binding to deconstruct a type when you are sure that there is an unique pattern
  - It stops match once matched
- To prevent matching and reconstruction, use =r@(y:_)= syntax to bind the matching part into a variable.
-  Use guard to refine matching. Guard is part of a matching. This means that if the guard fails, the next pattern will be tried.
    - Boolean expression for guard is separated by a bar
- View patterns allow ones to use a function that applies to an argumetn and check the return resutls with a specified one
    #+BEGIN_SRC haskell
specialClient :: Client -> Bool
specialClient (clientName -> "Mr. Alejandro") = True
specialClient (responsibility -> "Director")  = True
specialClient _                               = False
    #+END_SRC
- Use =-XViewPatterns= to enable view patterns
    - Add ={-# LANGUAGE ViewPatterns #-}= to the beginning of the file
    - Use =:set -XViewPatterns= in ghci
* Records
- Make updating and retrieving part of a structure easier
- Defined using data declarations
  - Instead of only using type, use =name :: type=
  - Separated by comma
  - Enclosed in braces
  - Use them as usual
    - Use braces and add value at appropriate arguments
    - Allowing different order
  - Can be pattern matched
  - Use /record puns/ to replace the patterns matching part from =field = name= to =field=.
    - Enabled by ={-# LANGUAGE NamedFieldPuns #-}=
  - Use =RecordWildCards= to let =GHC= generate "record puns" for you
    - Put =..= in the place where you do not feel like typeing the field name
    - Syntax =name {field_name = new_field_value}= can be used to create a new copy of structure that binds to =name=, where the =field_name= is updated to the value at =new_field_value=.
