#+TITLE: Compiler and Context-free grammar
#+AUTHOR: Reid Chen
#+DATE: <2020-08-01 Sat> 
#+tags[]: PL
#+keywords[]: CS PL
#+category: notes

* 构造一个简单的编译器
   - 目标 :: 表达式中缀表示转化成后追表示
   - 过程 :: 字符流 -> 词法分析器 -> 单词流 -> 语法制导翻译器 -> 中间表示形式
   - 语法制导翻译器 :: 语法分析 + 中间代码生成
* context-free grammar (CFG) 
   - context-free grammar :: For a language /L/, its =CFG= defines the sets of strings of symbols that are valid sentences in /L/.
   - sentence :: A string of symbols that can be derived from the rules of a grammar.
   - production :: Each rule in a =CFG= is called a =production=.
   - nonterminal symbol :: A syntactic variable used in a grammar's production.
   - terminal symbol :: Each word in the language defined by the grammar.
   - Backus-Naur Form :: BNF denoted nonterminal symbols by wrapping them in angle brackets, and terminal symbols were underlined.
   - Start symbol :: Or goal symbol, represents the set of all strings in a language, one of the nonterminal symbols introduced to add structure and abstraction to the language.
   Language /SN/

   \begin{align}
	  SheepNoise \rightarrow & \text{ baa } SheepNoise \\
	  	                    |& \text{ baa }
   \end{align}

   /SheepNoise/ is a nonterminal symbol.
   =baa= is a terminal symbol. [fn:1]
* 形式化定义 
   - $\Sigma$ :: 有穷字母表，元素，符号
   - 符号串 :: $\Sigma$ 中符号构成的有穷序列
   - 空字 :: 不含任何符号的序列, $\epsilon$
   - $\Sigma ^ *$ :: 符号串全体，包括空字
   - $\phi$ :: 空集 {}, 与$\epsilon$, {}, 和 {$\epsilon$}不同
   - $\Sigma ^ *$ 的子集U, V的积 (连接) :: $UV$ = {$\alpha \beta | \alpha \in U, \beta \in V$}
   - 没有交换律 :: $UV \neq VU$
   - 结合律 :: $(UV)W = U(VW)$
   - V自身的n次积（连接） :: $V^n$
   - $V^n$ = {\epsilon}
   - V的闭包 (Closure) :: $V^*$ = $V^0 \cup V^1 \cup V^2 \cup V^3 \cup$ ...
   - 正则闭包 :: $V^+ = VV^*$
* 四元式定义上下文无关文法
   - $(V_T, V_N, S, P)$
     - $V_T$ :: 非空有限集，终结符号集合, The set of terminal symbols, or words, in the language $L(G)$.
     - $V_N$ :: 非空有限集，非终结符号集合, The set of nonterminal symbols that appear in the productions of $G$.
     - $S$ :: 开始符号, A nonterminal designated as the =goal symbol= or =start symbol= of the grammar. $S$ represents the set of sentences in $L(G)$.
     - $P$ :: 产生式有限集. The set of productions or rewrite rules in $G$. Each rule in $P$ has the form $V_N \rightarrow (V_T \cup V_N)^+$.
* 推导
   1. 由开始符号作为推导起点, start with a prototype string that contains just the goal symbol.
   2. 由产生式右部分替换左部非终结符, pick a nonterminal symbol in the prototype string and rewrite it with a nonterminal or terminal symbol that can be converted to according to a production.
   3. 反复替换，最终得到单词串, repeat this rewriting process until the prototype string contains no more nonterminals, at which point it consists entirely of words, or temrinla symbols, and is a sentence in the language.
* 语法分析树 parse tree
  - 根结点位开始符号
  - 每个叶节点用一个 $T$ 或 $\epsilon$ 标记
  - 每个内部节点用一个NT标记
  - 节点A的孩子节点位X_1, X_2,..., X_n $\rightarrow$ (A \rightarrow X_1 X_2 X_3 ...X_n)
  - 叶节点从左到右构成数的输出 $\leftrightarrow$ 开始符号推导出的单词穿
** 运算符的结合律
   - Left associative :: +, -, *, /
   - Right associative :: ^, =
[fn:1] Cooper, K., & Torczon, L. (2011). Engineering a compiler. Elsevier.
