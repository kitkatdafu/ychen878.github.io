#+TITLE: Containers And Typeclasses
#+DATE: <2021-11-14 Mon>
#+category: notes
#+tags[]: Haskell
#+keywords[]: Haskell PL

Notes on /Practical Haskell/: A. Serra no Mean, Practical Haskell, https://doi.org/10.1007/978-1-4842-4480-7_4

* Using Packages
** Dependency
- Dependencies are noted under =build-depends= in the =.cabal= file
- Packages are available on =Hackage= and =Stackage=, depending on the project manager
- Packages' version can be specified and constrained
    #+BEGIN_SRC Haskell
      containers >= 0.6.0.1 && <= 0.7
    #+END_SRC
** Building
- stack's =resolvers=
    - a resolver describes a set of packages with a specific version, and a specific compiler environment in which they work
    - specified in the =stack.yml= file
    - =extra-dependencies= lists packages that are not available in stackage, but in hackage
* Containers
** Maps
- A key value store
- The key is unique
- Located in =Data.Map=
- =Map k a=
- =Map.empty= to create an empty =Map=
- =Map.singleton key value= to create an singleton map
- =Map.fromList []=  to convert a list of tuples into a =Map=
- =Map.insert= inserts a new key-value pair. Overwrites any previous value if
  the key is duplicated.
- =insertWith $::$ (a -> a -> a) -> k -> a - > Map k a -> Map k a= combines the
  old value with the new value instead of overwriting the former.
- Need to pass the map into all the functions, these functions return a new copy
  - But underlying implementation does not create a whole new copy of the data structure
- Use =null= to check if the map is empty.
- Use =member= to check if the map contains a specific key
- Use =lookup= to retrieve the associated value of a given key
  - returns a =Maybe=
- Use =delete= to remove delete a key-value pair from the map
- Use =adjust= to apply a function to the value associated with a given key
- Use =union=, =intersection=, and =difference= to produce a new map from two
  given maps. These set operations are applied to the keys. That is, if the
  values are different, the set operation keeps the value of the first map.
- classic list operations like =foldr=, =foldl=, =filter=, =partition=, =map=
  can be applied to the values of a map. One can append = One can append = One
  can append = One can append =WithKey= at the end of these functions to enable
  key manipulation.
- =assocs= converts a map into a list of tuples
** Sets
   - List, but cotains distinct elements
   - Map, but no key, only value.
** Trees
   - Trees are defined as:
   #+BEGIN_SRC haskell
     data Tree a = Node { rootLabel :: a, subForest :: Forest a}
     type Forest a = [Tree a] -- type synonym
   #+END_SRC
   - Defined in =Data.Tree=
** Graphs
   - Defined in =Data.Graph=
   - Use =graphFromEdges= to create a graph
     - Takes a list of =(value, key, [key])=
     - =value= is the value of this vertex
     - =key= is the key (id) of this vertex
     - =[key]= is a list of neighbor vertices of this vertex
* Type Classes
** Declaring Classes and Instances
   #+BEGIN_SRC haskell
     class ClassName typeVariable where
	 oneFunction :: oneType
         ...
	 otherFunction :: otherType
   #+END_SRC
   #+BEGIN_SRC haskell
     instance ClassName Type where
	 oneFunction = ... -- implementation
	 ...
         otherFunction = ... -- implementation
   #+END_SRC



