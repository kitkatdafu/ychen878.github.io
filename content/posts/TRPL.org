#+TITLE: Notes on The Rust Programming Language
#+AUTHOR: Reid Chen
#+DATE: <2020-04-30 Thu> 
#+tags[]: Rust
#+categories[]: CS PL
* Common Programming Concepts [fn:1]
[fn:1] Notes from The Rust Programming Language
** Variables and Mutability
   - The default integer type for a positive number that is not so large is =i32=.
   - Variables by default are =immutable=.
*** Differences Between Variables and Constants
     - =mut= cannot be used with constants.
     - Declare constants with =const= keyword, and the type must be annotated.
     - Constant can only be set to constant expression, not value computed during runtime.
*** Shadowing
     - You can declare a new variable with the same name as a previous variable and the new variable shadows the previous variable.
     - Type can be changed when shadowing.
     - Type cannot be changed when re-assigning a value with a different type to a mutable variable
** Data Types
    - Rust must know the types of all variables at compile time.
*** Scalar Types
     - scalar type :: Type represents a single value.
*** Integer Types
      - Size of =isize= and =usize= depends on the architecture of which program runs on. 32 bits if running on a 32-bit architecture.
      - Integer literals support =_= as a visual separator.
      - Default type is =i32=.
*** Floating-Point Types
      - There are =f32= or =f64= in Rust. There is no double.
      - Default type is =f64=.
*** Numeric Operations
      - Division behaves in the same way as =C=.
*** Boolean Type
      - Type =bool= has too possible values, =true= or =false=.
*** Character Type
      - Size of 4 bytes
      - Represents a Unicode Scalar Value.
*** Compound Types
     - compound types :: Can group multiple values into one type.
*** Tuple Type
      - Create a tuple by writing a comma-separated list of values inside parentheses.
      - Each position in the parentheses has a type.
      - These types do not have to be the same.
	#+begin_src rust
	fn main() {
	    let tup: (i32, f32, i8) = (500, 6.4, 1);
	    let (x, y, z) = tup;
	    println!("The value of y is {}", y);
	}
	#+end_src
      - One way to access a value inside a tuple is destructuring through pattern matching.
      - Another way to access a value is using =.= with an index. The first element in the tuple is indexed 0.
	#+begin_src rust
	fn main() {
	    let tup: (i32, f32, i8) = (500, 6.4, 1)
	    println!("The value of y is {}", tup.1);
	}
	#+end_src
*** Array Type
     - Each element in an array must has the same type.
     - Arrays in rust have fixed length.
     - Arrays are allocated on stack.
     - Type on an array is a composition of its elements' type and its length.
       #+begin_src rust
       let a: [u8; 3] = [1, 2, 3];
       #+end_src
     - An array can be initialized in the following way if each element has the same value.
       #+begin_src rust
       let a = [4; 8]; // 8 elements, each element has a value of 4.
       #+end_src
**** Accessing Array Element
       - Element can be accessed using indexing.
       - Rust will check if an index is in the bound in runtime.
** Functions
   - =fn= allows you to declare a new function.
   - Functions can be defined anywhere in the source code.
   - Parameters of a function must have types declared.
   - Instructions that perform some action and do not return a value are =statements=.
   - =Expressions= Evaluate to a resulting value.
   - Expressions can be part of statements.
   - Function bodies are made up of a series of statements optionally ending in an expression.
   - Calling a function is an expression.
   - The block that we use to create new scopes, ={}=, is an expression.
   - Expressions do not include ending semicolons.
**** Functions with Return Values
    - Declare return value's type using =->=.
    - The return value of the function is synonymous with the value of the final expression in the block of the body of a function.
    - To return early, use =return=.
** Control Flow
   - Unlike =C=, the condition must be a =bool=.
*** If
   - =if= is an expression, so it can be used on the right side of a =let= statement.
   - All arms must have the same type.
*** Repetition
**** Loop 
     - The loop keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop by using the keyword =break=.
     - Value after the =break= expression will be return.
**** For
     - For each loop on collection
       #+begin_src rust
       let numbers = [1, 2, 3, 4, 5];
       for number in numbers.iter() {
           println!("{}", number);
       }
       #+end_src
     - For each loop on range
       #+begin_src rust
       for i in (1..4).rev() {
           println!("{}", i);
       }
       #+end_src
* Using Structs to Structure Related Data
** Defining and Instantiating Structs
   - Using dot notation, =.=, to get a specific value from a struct.
   - A filed of an immutable struct cannot be modified.
   - If a struct is mutable, the dot notation can both access and modify fields of that struct.
   - Cannot make certain field of a struct mutable.
   - If variable that initialize a field has the same name as the field, no need to repeat the name.
     #+begin_src rust
     fn build_user(email: String, username: String) -> User {
         User {
             email,
             username,
             active: true,
             sign_in_count: 1,
	 }
    }
     #+end_src
   - When creating a new struct instance with some fields from an old instance, use =..= specifies that the remaining fields have the same values as the fields in the given instance.
     #+begin_src rust
     let user2 = User {
         email: String::from("another@example.com"),
         username: String::from("anotherusername567"),
	 ..user1
     };
     #+end_src
   - Tuple struct does not provide names associated with its fields but types.
     #+begin_src rust
     struct Color(i32, i32, i32);
     let black = Color(0, 0, 0);
     #+end_src
** Method Syntax
   - The first parameter for a method is always =self=.
   - Methods can also take ownership, like functions.
     #+begin_src rust
     struct Rectangle {
         width: u32,
	 height: u32,
     }

     impl Rectangle {
         fn area(&self) -> u32 {
	     self.width * self.height
	 }
     }
     #+end_src
   - If a method inside =impl= block does not have =self= as its first parameter, then this method is considered as =associated function=.
   - Associated functions can be called by =::= syntax.
   - Each struct can have multiple =impl= blocks.
* Understanding Ownership
** What is Ownership?
   - All data stored on the stack must have a known, fixed size.
   - Data with an unknown size at compile time or a size that might change must be stored on the heap instead.
   - Ownership Rules
     - Each value in Rust has a variable that's called it s owner.
     - There can only be one owner at a time.
     - When the owner goes out of scope, the value will be dropped.
   - In Rust, the memory is automatically returned once the variable that owns it goes out of scope.
   - Rust calls =drop= automatically at the closing curly bracket where the variable will go out of scope.
   - Only copying those on the stack and pointers, which are also on the stack, to the heap, but not data on the heap.
   - This sounds like shallow copy, but rust invalid the variable being copied. That is, old variable cannot be read or wrote anymore.
   - This is known as move.
   - Copying everything on the heap is very expensive.
   - rust will never automatically create "deep" copies of your data.
   - Use common method =clone= to create a "deep" copy.
*** Ownership and Functions
    - The semantics for passing a value to a function are similar to those for assigning a value to a variable.
    - When a value passes into a function, the ownership also is passed into the function.
    - Returning a value can also pass ownership.
** References and Borrowing
   - Reference allows you to refer to some value without taking ownership of it.
   - The =&val= syntax lets us create a reference that refers to the value =val= but does not own it.
   - We don't drop what the reference points to when the reference goes out of scope because we don't have ownership.
   - References are immutable by default.
   - You can have only one mutable reference to a particular piece of data in a particular scope.
   - We also cannot have a mutable reference while we have an immutable one.
   - The scope of a reference starts from where it is introduces and continues through the last time that reference is used.
   - The Rules of References:
     1. At any given time, you can have either one mutable reference or any number of immutable references.
     2. References must always be valid.
* Enums and Pattern Matching
** Defining an Enum
   - Enums can have different types.
   - Enums is similar to algebraic data types in functional programming languages.
   - Enums can have methods using =impl=.
     #+begin_src rust
     enum Message {
         Quit,
	 Move { x: i32, y: i32 },
	 Write(String),
	 ChangeColor(i32, i32, i32),
	 HiTuple((i32, i32)),
     }

     impl Message {
         fn call(&self) {
             println!("Hello Message");
         }
     }
     #+end_src
*** The =Option= Enum
    - =Option<T>= is provided by Rust, included in prelude.
      #+begin_src rust
      enum Option<T> {
          Some(T),
          None,
      }
      #+end_src
    - Value of =Option<T>= typed cannot be used in place of value typed =<T>=.
** The =match= Control Flow Operator
   - ==>= separates the pattern and the code to run.
   - You can use curly braces if there are multiple lines of code to run after pattern-matched.
   - We must exhaust every last possibility in order for the code to be valid.
   - =_= will match any value
** Concise Control flow with =if let=
   - =if let= matches one pattern.
     #+begin_src rust
     if let Some(3) = some_u8_value {
         println!("three");
     }
     #+end_src
   - Compiler does not check if cases are exhaustive.
   - Can be used with a =else= statement.
* Common Collections
** Vector
   - Can only store values of the same type
   - When a vector gets dropped, all of its contents are also dropped.
   - Vectors are indexed by number, starting at zero.
   - Adding a new element onto the end of the vector might require allocating new memory and copying the old elements to the new space.
** String
   - The compiler can coerce the =&String= argument into a =&str=.
   - Using =+= to concatenate two strings =s1= and =s2=, =let s3 = s1 + &s2=, actually takes ownership of s1, appends a copy of the contents of s2, and then returns ownership of the result.
   - Rust strings don't support indexing.
** Hash Map
   - The type =HashMap<K, V>= stores a mapping of keys of type =K= to values of type =V=.
   - We need to first =use= the =HashMap= form the collections portion of the standard library.
   - All of keys must have the same type, and all of the values must have the same type.
   - One can use =collect= method to turn a vector of tuples into a hash map.
   - Types that implement the =Copy= trait are copied into the hash map.
   - Owned values are moved and the hash map will be the owner of those values.
   - Inserting references to values into the hasp map does not move the value into the hash map.
   - =get()= returns an =Option<&V>=.
   - Insert a inserted key with different value will replace the old value.
   - Use =entry()= and =or_insert()= to insert a value if the key does not appear in the hash map.
   - =or_insert()= returns a reference to the value associates to the key.
   - Can dereference the return value of =or_insert()= to update the value.
* Error Handling
** Unrecoverable Errors with =panic!=
   - When the =panic!= macro executes, the program will print a failure message, unwind and clean up the stack, and then quit.
   - Set =RUST_BACKTRACE=1= to display the backtrace.
** Recoverable Errors with =Result=
   - Use =unwrap()= method on =Result= type. If the value is =Ok= variant, =unwrap= will return the value inside the =Ok=. If the =Result= is the =Err= variant, =unwrap= will call the =panic!= macro for us.
   - =expect()= is similar to =unwrap()=, but more detailed error message can be provided.
   - The =?= operator can be used in Functions that return =Result=.
* Traits, and Lifetimes
** Traits: Defining Shared Behavior
   - A trait tells the Rust compiler about functionality a particular types has can share with other types.
   - When implementing a trait, put the trait name after =impl= and then use the =for= keyword and specify the name of the type we want to implement the trait for.
   - =pub= makes a trait public so that other crates are able to implement it.
   - We can implement a trait on a type only if either the trait or the type is local to our crate.
   - To use a default implementation, specify and empty =impl= block.
   - =impl= can also be used on type parameter.
   - =+= syntax to specify multiple trait bounds.
   - =where= clause allows clearer trait bounds.
   - =impl Trait= syntax can also be used in the return position, but this function should only return a single type.
   - Rust allows conditionally implement a trait.
** Validating References with Lifetimes
   Every reference in Rust has a lifetime.
   - Lifetimes prevent dangling references.
   - The names of lifetime parameters must start with an apostrophe (='=).
   - We place lifetime parameter annotations after the =&= of a reference.
   - When returning a reference from a function, the lifetime parameter for the return type needs to match the lifetime parameter for one of the parameters.
   - Lifetimes syntax is about connecting the lifetimes of various parameters and return values of functions.
   - Lifetime Elision Rules
     - Each parameter that is a reference gets its own lifetime.
     - If there is exactly one input lifetime parameter, that lifetime is assigned to all.
     - If there are multiple input lifetime parameters, but one of them is =&self= or =&mut self= because this is a method, the lifetime of =self= is assigned to all output lifetime parameters.
     -='static= means that this reference can live for the entire duration of the program.
